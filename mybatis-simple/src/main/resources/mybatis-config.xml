<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <settings>
        <!-- 指定使用LOG4J输出日志 org.apache.ibatis.logging -->
        <setting name="logImpl" value="LOG4J"/>
        <!-- 将查询列带_的列名转为Java属性常用的UpperCase命令方式 -->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <setting name="aggressiveLazyLoading" value="false"/>
        <!-- MyBatis二级缓存的全局开关，默认开启 -->
        <setting name="cacheEnabled" value="true"/>
        <!--
        callSettersOnNulls	指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这在依赖于 Map.keySet()
         或 null 值进行初始化时比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的。
        returnInstanceForEmptyRow	当返回行的所有列都是空时，MyBatis默认返回 null。 当开启这个设置时，MyBatis会返回一个空实例。
        请注意，它也适用于嵌套的结果集（如集合或关联）。（新增于 3.4.2）
         -->
        <setting name="callSettersOnNulls" value="false"/>
        <setting name="returnInstanceForEmptyRow" value="false"/>
        <!-- 允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 -parameters 选项。 -->
        <setting name="useActualParamName" value="true"/>
    </settings>

    <typeAliases>
        <!-- org.apache.ibatis.type.TypeAliasRegistry.registerAliases(java.lang.String) -->
        <!--
            Alias aliasAnnotation = type.getAnnotation(Alias.class);
            if (aliasAnnotation != null) {
                alias = aliasAnnotation.value();
            }
         -->
        <package name="person.xianglin.simple.model"/>
    </typeAliases>

    <typeHandlers>
        <!-- 基于枚举索引的TypeHandler -->
        <!--        <typeHandler handler="org.apache.ibatis.type.EnumOrdinalTypeHandler"-->
        <!--                     javaType="tk.mybatis.simple.model.Enabled"/>-->
        <!-- 自定义的枚举类型处理器 -->
        <typeHandler handler="person.xianglin.simple.util.EnabledTypeHandler"
                     javaType="person.xianglin.simple.model.Enabled"/>
    </typeHandlers>

    <!--
    interceptor：拦截器的全限定名
    如果拦截器有参数，就用<property>标签传入。参数会在拦截器初始化时通过
    org.apache.ibatis.plugin.Interceptor.setProperties方法传入拦截器。
    在拦截器中使用Properties获取相应参数值
     -->
    <plugins>
        <plugin interceptor="person.xianglin.simple.intercept.CameHumpInterceptor">
            <property name="key" value="value"/>
        </plugin>
    </plugins>

    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC">
                <property name="" value=""/>
            </transactionManager>
            <dataSource type="UNPOOLED">
                <property name="driver" value="com.mysql.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://122.51.48.52:3306/mybatis?useSSL=false"/>
                <property name="username" value="xianglin"/>
                <property name="password" value="950915"/>
            </dataSource>
        </environment>
    </environments>

    <databaseIdProvider type="DB_VENDOR">
        <!-- java.sql.DatabaseMetaData.getDatabaseProductName -->
        <property name="MySQL" value="mysql"/>
    </databaseIdProvider>

    <mappers>
        <mapper resource="person/xianglin/simple/mapper/CountryMapper.xml"/>


        <!--        <mapper resource="tk/mybatis/simple/mapper/RoleMapper.xml"/>-->
        <!--        <mapper resource="tk/mybatis/simple/mapper/PrivilegeMapper.xml"/>-->
        <!--        <mapper resource="tk/mybatis/simple/mapper/RolePrivilegeMapper.xml"/>-->
        <!--        <mapper resource="tk/mybatis/simple/mapper/UserMapper.xml"/>-->
        <!--        <mapper resource="tk/mybatis/simple/mapper/UserRoleMapper.xml"/>-->

        <!--
        1. 查找tk.mybatis.simple.mapper包下的所有接口
        2. 判断接口对应的命名空间是否存在，存在时抛出异常
        3. 将接口的全限定名转为路径，加载接口对应的XML文件，找到xml后缀的文件就解析文件
        4. 处理接口中注解的方法
         -->
        <package name="person.xianglin.simple.mapper"/>
    </mappers>
</configuration>